require(devtools)
install_github("BillPetti/ggallup", force = TRUE)
require(ggallup)
install_github("BillPetti/ggallup", force = TRUE)
require(ggallup)
require(tidyverse)
sample_data_mean <- sample_data %>%
gather(question, value, -resp, -group) %>%
group_by(question, group) %>%
summarise_each(funs(mean(., na.rm = TRUE)), mean = value) %>%
spread(question, mean)
q1_plot <- ggplot(sample_data_mean, aes(factor(group), Q1)) +
geom_bar(aes(fill = factor(group)), stat = "identity") +
ggtitle("\nAverage Scores for Q1, by Group\n") +
xlab("\nGroups\n") +
ylab("Q1\n") +
coord_cartesian(ylim = c(3,4.25))
q1_plot
ggallup(q1_plot)
ggallup(q1_plot +
scale_fill_manual(values = gallup_palette, "Group"))
ggallup(q1_plot +
scale_fill_manual(values = gallup_palette, "Group")
scale_color_manual(values = gallup_palette, "Group"))
ggallup(q1_plot +
scale_fill_manual(values = gallup_palette, "Group") +
scale_color_manual(values = gallup_palette, "Group"))
ggallup(q1_plot +
scale_fill_manual(values = gallup_palette, "Group"))
require(devtools)
document()
gallup_palette <- c("#007934", "#61C250", "#C3E76F", "#A0A19E", "#7D7F7E", "#404545")
use_data(gallup_palette, overwrite = TRUE)
theme_gallup <- function(base_size = 12, base_family = "Helvetica") {
theme_minimal(base_size = base_size, base_family = base_family) %+replace%
theme(
plot.title = element_text(face = "bold", size = 16, color = "black"),
axis.text = element_text(face = "bold", size = 12, color = "black"),
axis.title = element_text(face = "bold", size = 15, color = "black"),
legend.title = element_text(face = "bold", size = 14, color = "black"),
legend.text = element_text(face = "bold", size = 14, color = "black"),
panel.background = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank()
)
}
use_data(theme_gallup, overwrite = TRUE)
theme_gallup_md <- function(base_size = 8, base_family = "Helvetica") {
theme_minimal(base_size = base_size, base_family = base_family) %+replace%
theme(
plot.title = element_text(face = "bold", size = 12, color = "black"),
axis.text = element_text(face = "bold", size = 6, color = "black"),
axis.title = element_text(face = "bold", size = 10, color = "black"),
legend.title = element_text(face = "bold", size = 10, color = "black"),
legend.text = element_text(face = "bold", size = 10, color = "black"),
panel.background = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank()
)
}
use_data(theme_gallup_md, overwrite = TRUE)
document()
rm(list = ls())
sample_data <- read.csv("https://raw.githubusercontent.com/BillPetti/R-Crash-Course/master/survey_sample_data.csv")
head(sample_data)
set.seed(42)
sample_data$group <- sample(1:3, 116, replace = TRUE)
with(sample_data, table(group))
require(ggplot2)
require(devtools)
install_github("BillPetti/ggallup", force = TRUE)
require(ggallup)
require(tidyverse)
sample_data_mean <- sample_data %>%
gather(question, value, -resp, -group) %>%
group_by(question, group) %>%
summarise_each(funs(mean(., na.rm = TRUE)), mean = value) %>%
spread(question, mean)
q1_plot <- ggplot(sample_data_mean, aes(factor(group), Q1)) +
geom_bar(aes(fill = factor(group)), stat = "identity") +
ggtitle("\nAverage Scores for Q1, by Group\n") +
xlab("\nGroups\n") +
ylab("Q1\n") +
coord_cartesian(ylim = c(3,4.25))
q1_plot
ggallup(q1_plot)
gallup_palette <- c("#007934", "#61C250", "#C3E76F", "#A0A19E", "#7D7F7E", "#404545")
use_data(gallup_palette, overwrite = TRUE)
theme_gallup <- function(base_size = 12, base_family = "Helvetica") {
theme_minimal(base_size = base_size, base_family = base_family) %+replace%
theme(
plot.title = element_text(face = "bold", size = 16, color = "black"),
axis.text = element_text(face = "bold", size = 12, color = "black"),
axis.title = element_text(face = "bold", size = 15, color = "black"),
legend.title = element_text(face = "bold", size = 14, color = "black"),
legend.text = element_text(face = "bold", size = 14, color = "black"),
panel.background = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank()
)
}
use_data(theme_gallup, overwrite = TRUE)
theme_gallup_md <- function(base_size = 8, base_family = "Helvetica") {
theme_minimal(base_size = base_size, base_family = base_family) %+replace%
theme(
plot.title = element_text(face = "bold", size = 12, color = "black"),
axis.text = element_text(face = "bold", size = 6, color = "black"),
axis.title = element_text(face = "bold", size = 10, color = "black"),
legend.title = element_text(face = "bold", size = 10, color = "black"),
legend.text = element_text(face = "bold", size = 10, color = "black"),
panel.background = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank()
)
}
use_data(theme_gallup_md, overwrite = TRUE)
document()
ggallup(q1_plot)
ggallup(q1_plot +
scale_fill_manual(values = gallup_palette, "Group"))
document()
rm(list = ls())
sample_data <- read.csv("https://raw.githubusercontent.com/BillPetti/R-Crash-Course/master/survey_sample_data.csv")
head(sample_data)
set.seed(42)
sample_data$group <- sample(1:3, 116, replace = TRUE)
with(sample_data, table(group))
require(ggplot2)
require(devtools)
install_github("BillPetti/ggallup", force = TRUE)
require(ggallup)
require(tidyverse)
sample_data_mean <- sample_data %>%
gather(question, value, -resp, -group) %>%
group_by(question, group) %>%
summarise_each(funs(mean(., na.rm = TRUE)), mean = value) %>%
spread(question, mean)
q1_plot <- ggplot(sample_data_mean, aes(factor(group), Q1)) +
geom_bar(aes(fill = factor(group)), stat = "identity") +
ggtitle("\nAverage Scores for Q1, by Group\n") +
xlab("\nGroups\n") +
ylab("Q1\n") +
coord_cartesian(ylim = c(3,4.25))
q1_plot
```
ggallup(q1_plot)
gallup_palette <- c("#007934", "#61C250", "#C3E76F", "#A0A19E", "#7D7F7E", "#404545")
use_data(gallup_palette, overwrite = TRUE)
theme_gallup <- function(base_size = 12, base_family = "Helvetica") {
theme_minimal(base_size = base_size, base_family = base_family) %+replace%
theme(
plot.title = element_text(face = "bold", size = 16, color = "black"),
axis.text = element_text(face = "bold", size = 12, color = "black"),
axis.title = element_text(face = "bold", size = 15, color = "black"),
legend.title = element_text(face = "bold", size = 14, color = "black"),
legend.text = element_text(face = "bold", size = 14, color = "black"),
panel.background = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank()
)
}
use_data(theme_gallup, overwrite = TRUE)
theme_gallup_md <- function(base_size = 8, base_family = "Helvetica") {
theme_minimal(base_size = base_size, base_family = base_family) %+replace%
theme(
plot.title = element_text(face = "bold", size = 12, color = "black"),
axis.text = element_text(face = "bold", size = 6, color = "black"),
axis.title = element_text(face = "bold", size = 10, color = "black"),
legend.title = element_text(face = "bold", size = 10, color = "black"),
legend.text = element_text(face = "bold", size = 10, color = "black"),
panel.background = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank()
)
}
use_data(theme_gallup_md, overwrite = TRUE)
document()
remove.packages("ggallup")
rm(list = ls())
require(devtools)
document()
remove.packages("ggallup")
sample_data <- read.csv("https://raw.githubusercontent.com/BillPetti/R-Crash-Course/master/survey_sample_data.csv")
head(sample_data)
set.seed(42)
sample_data$group <- sample(1:3, 116, replace = TRUE)
with(sample_data, table(group))
require(ggplot2)
require(devtools)
install_github("BillPetti/ggallup", force = TRUE)
require(ggallup)
require(tidyverse)
sample_data_mean <- sample_data %>%
gather(question, value, -resp, -group) %>%
group_by(question, group) %>%
summarise_each(funs(mean(., na.rm = TRUE)), mean = value) %>%
spread(question, mean)
q1_plot <- ggplot(sample_data_mean, aes(factor(group), Q1)) +
geom_bar(aes(fill = factor(group)), stat = "identity") +
ggtitle("\nAverage Scores for Q1, by Group\n") +
xlab("\nGroups\n") +
ylab("Q1\n") +
coord_cartesian(ylim = c(3,4.25))
q1_plot
ggallup(q1_plot)
require(devtools)
install_github("BillPetti/ggallup", force = TRUE)
require(ggallup)
ggallup::ggallup(q1_plot)
ggallup(q1_plot)
require(ggplot2)
ggallup(q1_plot)
require(devtools)
document()
install_github("BillPetti/ggallup", force = TRUE)
ggallup(q1_plot)
ggallup(q1_plot +
scale_fill_manual(values = gallup_palette, "Group"))
forecast <- data_frame(Date = c("2015-1", "2015-2", "2015-3", "2015-4", "2016-1", "2016-2", "2016-3", "2016-4", "2017-1", "2017-2", "2017-3", "2017-4", "2018-1", "2018-2"), Sales = c(123657, 138786, 135784, 170495, 134050, 145450, 110090, 156504, 123580, 144678, 139087, 167098, 132456, 147564))
forecast_melt <- forecast %>%
gather(key = key, value = 'Sales in Millions', -Date)
forecast_melt <- forecast_melt %>%
mutate(group = c("Actuals", "Actuals", "Actuals", "Actuals",
"Actuals", "Actuals", "Actuals", "Actuals",
"Forecast", "Forecast", "Forecast", "Forecast",
"Forecast", "Forecast"))
require(tidy)
require(tidyverse)
forecast <- data_frame(Date = c("2015-1", "2015-2", "2015-3", "2015-4", "2016-1", "2016-2", "2016-3", "2016-4", "2017-1", "2017-2", "2017-3", "2017-4", "2018-1", "2018-2"), Sales = c(123657, 138786, 135784, 170495, 134050, 145450, 110090, 156504, 123580, 144678, 139087, 167098, 132456, 147564))
forecast_melt <- forecast %>%
gather(key = key, value = 'Sales in Millions', -Date)
forecast_melt <- forecast_melt %>%
mutate(group = c("Actuals", "Actuals", "Actuals", "Actuals",
"Actuals", "Actuals", "Actuals", "Actuals",
"Forecast", "Forecast", "Forecast", "Forecast",
"Forecast", "Forecast"))
forecast_melt %>%
ggplot(aes(x = Date, y = `Sales in Millions`, group = 1)) +
geom_point(color = "#61C250") +
geom_line(linetype = "dashed", color = "#61C250") +
geom_line(data = filter(forecast_melt, group == "Actuals"), color = "#61C250") +
xlab("\nQuarter") +
ylab("\nSales in Millions\n") +
ggtitle("\nExample: Actual & Forecasted Sales (MM)\n") +
scale_y_continuous(labels = scales::comma)
forecast_melt %>%
ggplot(aes(x = Date, y = `Sales in Millions`, group = 1)) +
geom_point(aes(color = group)) +
geom_line(aes(color = group), linetype = "dashed") +
geom_line(data = filter(forecast_melt, group == "Actuals"), color = group) +
xlab("\nQuarter") +
ylab("\nSales in Millions\n") +
ggtitle("\nExample: Actual & Forecasted Sales (MM)\n") +
scale_y_continuous(labels = scales::comma)
forecast_melt %>%
ggplot(aes(x = Date, y = `Sales in Millions`, group = 1)) +
geom_point(aes(color = group)) +
geom_line(aes(color = group), linetype = "dashed") +
geom_line(data = filter(forecast_melt, color = group, group = "Actuals")) +
xlab("\nQuarter") +
ylab("\nSales in Millions\n") +
ggtitle("\nExample: Actual & Forecasted Sales (MM)\n") +
scale_y_continuous(labels = scales::comma)
forecast_melt %>%
ggplot(aes(x = Date, y = `Sales in Millions`, group = 1)) +
geom_point(aes(color = group)) +
geom_line(aes(color = group), linetype = "dashed") +
geom_line(data = filter(forecast_melt, group = "Actuals"), aes(color = group)) +
xlab("\nQuarter") +
ylab("\nSales in Millions\n") +
ggtitle("\nExample: Actual & Forecasted Sales (MM)\n") +
scale_y_continuous(labels = scales::comma)
forecast_melt %>%
ggplot(aes(x = Date, y = `Sales in Millions`, group = 1)) +
geom_point(aes(color = group)) +
geom_line(aes(color = group), linetype = "dashed") +
geom_line(data = filter(forecast_melt, group == "Actuals"), aes(color = group)) +
xlab("\nQuarter") +
ylab("\nSales in Millions\n") +
ggtitle("\nExample: Actual & Forecasted Sales (MM)\n") +
scale_y_continuous(labels = scales::comma)
forecast_melt %>%
ggplot(aes(x = Date, y = `Sales in Millions`, group = 1)) +
geom_point(color = "#61C250") +
geom_line(linetype = "dashed", color = "#61C250") +
geom_line(data = filter(forecast_melt, group == "Actuals"), color = "#61C250") +
xlab("\nQuarter") +
ylab("\nSales in Millions\n") +
ggtitle("\nExample: Actual & Forecasted Sales (MM)\n") +
scale_y_continuous(labels = scales::comma)
forecast_melt %>%
ggplot(aes(x = Date, y = `Sales in Millions`, group = 1)) +
geom_point(aes(color = group)) +
geom_line(linetype = "dashed", color = "#61C250") +
geom_line(data = filter(forecast_melt, group == "Actuals"), color = "#61C250") +
xlab("\nQuarter") +
ylab("\nSales in Millions\n") +
ggtitle("\nExample: Actual & Forecasted Sales (MM)\n") +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = gallup_palette)
forecast_melt %>%
ggplot(aes(x = Date, y = `Sales in Millions`, group = 1)) +
geom_point(aes(color = group)) +
geom_line(aes(color = group), linetype = "dashed") +
geom_line(data = filter(forecast_melt, group == "Actuals"), color = "#61C250") +
xlab("\nQuarter") +
ylab("\nSales in Millions\n") +
ggtitle("\nExample: Actual & Forecasted Sales (MM)\n") +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = gallup_palette)
forecast_melt %>%
ggplot(aes(x = Date, y = `Sales in Millions`, group = 1)) +
geom_point(aes(color = group)) +
geom_line(linetype = "dashed", color = "#61C250") +
geom_line(data = filter(forecast_melt, group == "Actuals"), color = "#61C250") +
xlab("\nQuarter") +
ylab("\nSales in Millions\n") +
ggtitle("\nExample: Actual & Forecasted Sales (MM)\n") +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = gallup_palette)
forecast_melt %>%
ggplot(aes(x = Date, y = `Sales in Millions`, group = 1)) +
geom_point(aes(color = group)) +
geom_line(linetype = "dashed", color = "#61C250") +
geom_line(data = filter(forecast_melt, group == "Actuals"), aes(color = group)) +
xlab("\nQuarter") +
ylab("\nSales in Millions\n") +
ggtitle("\nExample: Actual & Forecasted Sales (MM)\n") +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = gallup_palette)
forecast_melt %>%
ggplot(aes(x = Date, y = `Sales in Millions`, group = 1)) +
geom_point(aes(color = group)) +
geom_line(linetype = "dashed", color = "#61C250") +
geom_line(data = filter(forecast_melt, group == "Actuals"), aes(color = group)) +
xlab("\nQuarter") +
ylab("\nSales in Millions\n") +
ggtitle("\nExample: Actual & Forecasted Sales (MM)\n") +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = gallup_palette, "")
ggallup(forecast_melt %>%
ggplot(aes(x = Date, y = `Sales in Millions`, group = 1)) +
geom_point(aes(color = group)) +
geom_line(linetype = "dashed", color = "#61C250") +
geom_line(data = filter(forecast_melt, group == "Actuals"), aes(color = group)) +
xlab("\nQuarter") +
ylab("\nSales in Millions\n") +
ggtitle("\nExample: Actual & Forecasted Sales (MM)\n") +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = gallup_palette, ""))
forecast_melt %>%
ggplot(aes(x = Date, y = `Sales in Millions`, group = 1)) +
geom_point(aes(color = group)) +
geom_line(linetype = "dashed", color = "#61C250") +
geom_line(data = filter(forecast_melt, group == "Actuals"), aes(color = group)) +
xlab("\nQuarter") +
ylab("\nSales in Millions\n") +
ggtitle("\nExample: Actual & Forecasted Sales (MM)\n") +
scale_y_continuous(labels = scales::comma)
forecast_melt %>%
ggplot(aes(x = Date, y = `Sales in Millions`, group = 1)) +
geom_point(aes(color = group)) +
geom_line(linetype = "dashed") +
geom_line(data = filter(forecast_melt, group == "Actuals"), aes(color = group)) +
xlab("\nQuarter") +
ylab("\nSales in Millions\n") +
ggtitle("\nExample: Actual & Forecasted Sales (MM)\n") +
scale_y_continuous(labels = scales::comma)
ggallup(forecast_melt %>%
ggplot(aes(x = Date, y = `Sales in Millions`, group = 1)) +
geom_point(aes(color = group)) +
geom_line(linetype = "dashed", color = "#61C250") +
geom_line(data = filter(forecast_melt, group == "Actuals"), aes(color = group)) +
xlab("\nQuarter") +
ylab("\nSales in Millions\n") +
ggtitle("\nExample: Actual & Forecasted Sales (MM)\n") +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = gallup_palette, ""))
q1_plot_gallup <- ggallup(q1_plot)
q1_plot_gallup
q1_plot_gallup <- ggallup(q1_plot)
q1_plot_gallup
q1_plot_gallup_palette <- ggallup(q1_plot +
scale_fill_manual(values = gallup_palette, "Group"))
q1_plot_gallup_palette
forecast_plot <- ggallup(forecast_melt %>%
ggplot(aes(x = Date, y = `Sales in Millions`, group = 1)) +
geom_point(aes(color = group)) +
geom_line(linetype = "dashed", color = "#61C250") +
geom_line(data = filter(forecast_melt, group == "Actuals"), aes(color = group)) +
xlab("\nQuarter") +
ylab("\nSales in Millions\n") +
ggtitle("\nExample: Actual & Forecasted Sales (MM)\n") +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = gallup_palette, ""))
forecast_plot
View(forecast_melt)
View(forecast)
View(forecast)
ggplot(forecast, aes(Date, Sales)) +
geom_point(aes(color = Sales))
ggplot(forecast, aes(Date, Sales)) +
geom_point(aes(color = Sales)) +
scale_color_continuous(values = gallup_palette)
?scale_color_continuous
ggplot(forecast, aes(Date, Sales)) +
geom_point(aes(color = Sales)) +
scale_color_gradientn(values = gallup_palette)
ggplot(forecast, aes(Date, Sales)) +
geom_point(aes(color = Sales)) +
scale_color_gradientn(colours = gallup_palette)
ggplot(forecast, aes(Date, Sales)) +
geom_point(aes(color = Sales)) +
scale_color_gradient2(colours = gallup_palette)
ggplot(forecast, aes(Date, Sales)) +
geom_point(aes(color = Sales)) +
scale_color_gradient2(low = "#007934", high = "#C3E76F")
ggplot(forecast, aes(Date, Sales)) +
geom_point(aes(color = Sales)) +
scale_color_gradient2(low = "#007934", high = "#C3E76F")
ggplot(forecast, aes(Date, Sales)) +
geom_point(aes(color = Sales)) +
scale_color_gradient2(low = "#007934", high = "#404545")
ggplot(forecast, aes(Date, Sales)) +
geom_point(aes(color = Sales)) +
scale_color_gradient2(high = "#404545")
ggplot(forecast, aes(Date, Sales)) +
geom_point(aes(color = Sales)) +
scale_color_gradient2(high = "#007934")
ggsave(filename = "/ggallup/images/q1_plot", plot = q1_plot, height = 8.5, width = 11, units = "in")
ggsave(filename = "/ggallup/images/q1_plot.png", plot = q1_plot, height = 8.5, width = 11, units = "in")
ggsave(filename = "ggallup/images/q1_plot.png", plot = q1_plot, height = 8.5, width = 11, units = "in")
getwd()
ggsave(filename = "/Users/williampetti/ggallup/images/q1_plot.png", plot = q1_plot, height = 8.5, width = 11, units = "in")
ggsave(filename = "/Users/williampetti/ggallup/images/q1_plot_gallup.png", plot = q1_plot_gallup, height = 8.5, width = 11, units = "in")
ggsave(filename = "/Users/williampetti/ggallup/images/q1_plot_gallup_palette.png", plot = q1_plot_gallup_palette, height = 8.5, width = 11, units = "in")
ggsave(filename = "/Users/williampetti/ggallup/images/forecast_plot.png", plot = forecast_plot, height = 8.5, width = 11, units = "in")
forecast_plot <- ggallup(forecast_melt %>%
ggplot(aes(x = Date, y = `Sales in Millions`, group = 1)) +
geom_boxplot(aes(color = group)) +
geom_line(linetype = "dashed", color = "#61C250") +
geom_line(data = filter(forecast_melt, group == "Actuals"), aes(color = group)) +
xlab("\nQuarter") +
ylab("\nSales in Millions\n") +
ggtitle("\nExample: Actual & Forecasted Sales (MM)\n") +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = gallup_palette, ""))
forecast_plot
forecast_plot <- ggallup(forecast_melt %>%
ggplot(aes(x = Date, y = `Sales in Millions`, group = 1)) +
geom_boxplot(aes(fill = group)) +
# geom_line(linetype = "dashed", color = "#61C250") +
# geom_line(data = filter(forecast_melt, group == "Actuals"), aes(color = group)) +
xlab("\nQuarter") +
ylab("\nSales in Millions\n") +
ggtitle("\nExample: Actual & Forecasted Sales (MM)\n") +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = gallup_palette, ""))
forecast_plot
forecast_plot <- ggallup(forecast_melt %>%
ggplot(aes(x = Date, y = `Sales in Millions`, group = 1)) +
geom_boxplot(aes(fill = #61C250)) +
# geom_line(linetype = "dashed", color = "#61C250") +
# geom_line(data = filter(forecast_melt, group == "Actuals"), aes(color = group)) +
xlab("\nQuarter") +
ylab("\nSales in Millions\n") +
ggtitle("\nExample: Actual & Forecasted Sales (MM)\n") +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = gallup_palette, ""))
forecast_plot
forecast_plot <- ggallup(forecast_melt %>%
ggplot(aes(x = Date, y = `Sales in Millions`, group = 1)) +
geom_boxplot(aes(fill = "#61C250")) +
# geom_line(linetype = "dashed", color = "#61C250") +
# geom_line(data = filter(forecast_melt, group == "Actuals"), aes(color = group)) +
xlab("\nQuarter") +
ylab("\nSales in Millions\n") +
ggtitle("\nExample: Actual & Forecasted Sales (MM)\n") +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = gallup_palette, ""))
forecast_plot
```
forecast_plot <- ggallup(forecast_melt %>%
ggplot(aes(x = Date, y = `Sales in Millions`, group = 1)) +
geom_boxplot(fill = "#61C250") +
# geom_line(linetype = "dashed", color = "#61C250") +
# geom_line(data = filter(forecast_melt, group == "Actuals"), aes(color = group)) +
xlab("\nQuarter") +
ylab("\nSales in Millions\n") +
ggtitle("\nExample: Actual & Forecasted Sales (MM)\n") +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = gallup_palette, ""))
forecast_plot
```
forecast_plot <- ggallup(forecast_melt %>%
ggplot(aes(x = Date, y = `Sales in Millions`, group = 1)) +
geom_boxplot(color = "#61C250") +
# geom_line(linetype = "dashed", color = "#61C250") +
# geom_line(data = filter(forecast_melt, group == "Actuals"), aes(color = group)) +
xlab("\nQuarter") +
ylab("\nSales in Millions\n") +
ggtitle("\nExample: Actual & Forecasted Sales (MM)\n") +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = gallup_palette, ""))
forecast_plot
```
